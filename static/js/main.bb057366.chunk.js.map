{"version":3,"sources":["AudioRecorder.jsx","App.js","serviceWorker.js","index.js"],"names":["AudioRecorder","chunks","wavesurferProperties","container","waveColor","progressColor","cursorColor","barWidth","barRadius","height","barGap","cursorWidth","normalize","responsive","plugins","MicrophonePlugin","create","constraints","audio","channelCount","sampleRate","sampleSize","video","onClickHandle","undefined","wavesurfer","WaveSurfer","microphone","on","stream","mediaRecorder","MediaRecorder","ondataavailable","e","push","data","start","active","onstop","console","log","audioBlob","Blob","audioURL","window","URL","createObjectURL","createDownloadLink","loadAudio","stop","onChangeHandle","target","files","url","link","document","createElement","body","appendChild","href","download","innerText","load","playBtn","onclick","play","className","id","onClick","this","type","onChange","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA+GeA,E,2MAvGXC,OAAS,G,EACTC,qBAAuB,CACnBC,UAAW,cACXC,UAAW,UACXC,cAAe,UACfC,YAAa,UACbC,SAAU,EACVC,UAAW,EACXC,OAAQ,IACRC,OAAQ,EACRC,YAAa,EACbC,WAAW,EACXC,YAAY,EACZC,QAAS,CACLC,IAAiBC,OAAO,CACpBC,YAAa,CACTC,MAAO,CACHC,aAAc,EACdC,WAAY,KACZC,WAAY,IAEhBC,OAAO,O,EAsBvBC,cAAgB,gBACYC,IAApB,EAAKC,YACL,EAAKA,WAAaC,IAAWV,OAAO,EAAKd,sBAEzC,EAAKuB,WAAWE,WAAWC,GAAG,eAAe,SAAAC,GACzC,EAAKC,cAAgB,IAAIC,cAAcF,GACvC,EAAKC,cAAcE,gBAAmB,SAAAC,GAClC,EAAKhC,OAAOiC,KAAKD,EAAEE,OAEvB,EAAKL,cAAcM,WAGvB,EAAKX,WAAWE,WAAWS,SAEvB,EAAKX,WAAWE,WAAWU,QAC3B,EAAKP,cAAcQ,OAAS,SAAAL,GACxBM,QAAQC,IAAI,SAAW,EAAKvC,QAC5B,IAAIwC,EAAY,IAAIC,KAAK,EAAKzC,OAAQ,CAAE,KAAS,cACjD,EAAKA,OAAS,GACd,IAAI0C,EAAWC,OAAOC,IAAIC,gBAAgBL,GAC1C,EAAKM,mBAAmBJ,GACxB,EAAKK,UAAUL,IAEnB,EAAKb,cAAcmB,OACnB,EAAKxB,WAAWE,WAAWsB,QAE3B,EAAKxB,WAAWE,WAAWS,S,EAKvCc,eAAiB,SAAAjB,GAIb,QAHwBT,IAApB,EAAKC,aACL,EAAKA,WAAaC,IAAWV,OAAO,EAAKd,4BAEpBsB,IAAtBS,EAAEkB,OAAOC,MAAM,GAAkB,CAChC,IAAIT,EAAWC,OAAOC,IAAIC,gBAAgBb,EAAEkB,OAAOC,MAAM,IACzD,EAAKJ,UAAUL,K,EAIvBI,mBAAqB,SAAAM,GACjB,IAAIC,EAAOC,SAASC,cAAc,KAClCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAKK,KAAON,EACZC,EAAKM,SAAW,iBAChBN,EAAKO,UAAY,uB,EAGrBb,UAAY,SAAAK,GACR,EAAK5B,WAAWqC,KAAKT,GACrB,IAAIU,EAAUR,SAASC,cAAc,UACrCD,SAASE,KAAKC,YAAYK,GAC1BA,EAAQF,UAAY,OACpBE,EAAQC,QAAU,WACd,EAAKvC,WAAWwC,S,wEAtEpB,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,wBACX,yBAAKC,GAAG,gBAEZ,yBAAKD,UAAU,YACX,4BAAQC,GAAG,SAASC,QAASC,KAAK9C,eAAlC,4BAGA,2BAAO+C,KAAM,OAAOC,SAAUF,KAAKnB,uB,GAxC3BsB,IAAMC,W,MCQnBC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCIcS,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb057366.chunk.js","sourcesContent":["import React from 'react';\nimport MicrophonePlugin from 'wavesurfer.js/dist/plugin/wavesurfer.microphone.min.js';\nimport WaveSurfer from 'wavesurfer.js';\n// import './AudioRecorder.css';\n\nclass AudioRecorder extends React.Component {\n    mediaRecorder;\n    wavesurfer; \n    chunks = [];\n    wavesurferProperties = {\n        container: '#wave-graph',\n        waveColor: '#D9DCFF',\n        progressColor: '#4353FF',\n        cursorColor: '#4353FF',\n        barWidth: 3,\n        barRadius: 3,\n        height: 200,\n        barGap: 3,\n        cursorWidth: 1,\n        normalize: true,\n        responsive: true,\n        plugins: [\n            MicrophonePlugin.create({\n                constraints: {\n                    audio: {\n                        channelCount: 1, // mono\n                        sampleRate: 16000, // 16000 hz\n                        sampleSize: 16 // 16 bits\n                    },\n                    video: false\n                }\n            })\n        ]\n    };\n\n    render() {\n        return (\n            <div className='container'>\n                <div className='wave-graph-container'>\n                    <div id='wave-graph'></div>\n                </div>\n                <div className='controls'>\n                    <button id='micBtn' onClick={this.onClickHandle}>\n                    Microphone: Start / Stop\n                    </button>\n                    <input type= \"file\" onChange={this.onChangeHandle} ></input>\n                </div>\n            </div>\n        );\n    }\n\n    onClickHandle = () => {\n        if (this.wavesurfer === undefined) {\n            this.wavesurfer = WaveSurfer.create(this.wavesurferProperties);\n\n            this.wavesurfer.microphone.on('deviceReady', stream => {\n                this.mediaRecorder = new MediaRecorder(stream);\n                this.mediaRecorder.ondataavailable  = e => {\n                    this.chunks.push(e.data);\n                };\n                this.mediaRecorder.start();\n            });\n\n            this.wavesurfer.microphone.start();\n        } else {\n            if (this.wavesurfer.microphone.active) {\n                this.mediaRecorder.onstop = e => {\n                    console.log('chunks' + this.chunks);\n                    let audioBlob = new Blob(this.chunks, { 'type' : 'audio/wav' });\n                    this.chunks = [];\n                    let audioURL = window.URL.createObjectURL(audioBlob); \n                    this.createDownloadLink(audioURL)\n                    this.loadAudio(audioURL);\n                }\n                this.mediaRecorder.stop(); \n                this.wavesurfer.microphone.stop();\n            } else {\n                this.wavesurfer.microphone.start();\n            }\n        }\n    };\n\n    onChangeHandle = e => {\n        if (this.wavesurfer === undefined)\n            this.wavesurfer = WaveSurfer.create(this.wavesurferProperties);\n        \n        if(e.target.files[0] !== undefined) {\n            let audioURL = window.URL.createObjectURL(e.target.files[0]);\n            this.loadAudio(audioURL);\n        }\n    }\n\n    createDownloadLink = url => {\n        let link = document.createElement('a');\n        document.body.appendChild(link);\n        link.href = url;\n        link.download = 'audio-test.wav';\n        link.innerText = 'download audio test';\n    }\n\n    loadAudio = url => {\n        this.wavesurfer.load(url);\n        let playBtn = document.createElement('button');\n        document.body.appendChild(playBtn);\n        playBtn.innerText = 'Play';\n        playBtn.onclick = () => {\n            this.wavesurfer.play();\n        }\n    }\n}\n\nexport default AudioRecorder;","import React from 'react';\nimport Recorder from './AudioRecorder';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Recorder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}